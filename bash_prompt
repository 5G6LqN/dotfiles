# @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”
# Shamelessly copied from https://github.com/gf3/dotfiles
# Screenshot: http://i.imgur.com/s0Blh.png

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
        export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
        export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
        tput sgr0
        if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
                MAGENTA=$(tput setaf 9)
                ORANGE=$(tput setaf 172)
                GREEN=$(tput setaf 190)
                PURPLE=$(tput setaf 141)
                WHITE=$(tput setaf 0)
        else
                MAGENTA=$(tput setaf 5)
                ORANGE=$(tput setaf 4)
                GREEN=$(tput setaf 2)
                PURPLE=$(tput setaf 1)
                WHITE=$(tput setaf 7)
        fi
        BOLD=$(tput bold)
        RESET=$(tput sgr0)
else
        MAGENTA="\033[1;31m"
        ORANGE="\033[1;33m"
        GREEN="\033[1;32m"
        PURPLE="\033[1;35m"
        WHITE="\[\033[1;37m\]"
        YELLOW="\[\033[0;33m\]"
        BOLD=""
        RESET="\033[m"
fi

#export MAGENTA
#export ORANGE
#export GREEN
#export PURPLE
#export WHITE
#export BOLD
#export RESET

BLACK_HIGH="\[\033[0;90m\]"
RED_HIGH="\[\033[0;91m\]"
GREEN_HIGH="\[\033[0;92m\]"
YELLOW_HIGH="\[\033[0;93m\]"
BLUE_HIGH="\[\033[0;94m\]"
PURPLE_HIGH="\[\033[0;95m\]"
CYAN_HIGH="\[\033[0;96m\] "
WHITE_HIGH="\[\033[0;97m\]"

BLACK="\[\033[0;30m\]"
RED="\033[38;5;1m"
GREEN="\033[0;32m"
YELLOW="\[\033[0;33m\]"
ORANGE="\033[38;5;166m"
BLUE="\[\033[0;34m\]"
PURPLE="\[\033[0;35m\]"
CYAN="\[\033[0;36m\]"
WHITE="\[\033[0;37m\]"

function git_num_untracked_files {
  expr `LC_ALL=C git status --porcelain 2>/dev/null| grep "^??" | wc -l`
}

function test_parse_git_dirty {
    if $(LC_ALL=C git diff --shortstat 2> /dev/null | tail -n1) != ""; then
        echo "✘"
    else
        echo "✔"
    fi
}

function parse_git_dirty {
    local git_prompt=""
    local git_status=$(LC_ALL=C git status --porcelain 2> /dev/null | tail -n1)

    local git_added="A*"
    local git_new_file="??*"

    case $git_status in
        $git_new_file)
            git_prompt+="?" ;;
        $git_added)
            git_prompt+="M" ;;
    esac

    local git_diff=$(LC_ALL=C git diff --shortstat 2> /dev/null | tail -n1)
    if [ "$git_prompt" != "" ]
    then
        echo -e "${RED} $git_prompt ✘"
    else
        echo -e "${GREEN} $git_prompt ✔"
    fi


}

#function parse_git_dirty() {
#        [[ $(LC_ALL=C git status 2> /dev/null | tail -n1) != *"working directory clean"* ]] && echo "*"
#}

function parse_git_branch() {
        git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

export PS1="\! \[$ORANGE\]\h \[$GREEN\]\w\[$WHITE\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" \")\[$PURPLE\]\$(parse_git_branch)\[$WHITE\]\n\$ \[$RESET\]"
export PS1="\[$BLUE\]\t \[$ORANGE\]\! \[$CYAN\]\h \[$GREEN\] \w\[$WHITE\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" \")\[$PURPLE\]\$(parse_git_branch)\[$ORANGE\]\n\$ \[$RESET\]"
export PS2="\[$ORANGE\]→ \[$RESET\]"
